{
	// Place your taro-demo 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"vue ts template": {
		"prefix": "own-ts-base",
		"body": [
			"<script lang=\"ts\">",
			"/* COMPONENT DOCUMENT",
			" * author: $1",
			" * date: ${CURRENT_YEAR}/${CURRENT_MONTH}/${CURRENT_DATE}",
			" * desc: $2",
			" */",
			"",
			"import { Component, Emit, Prop, Vue, Watch } from 'vue-property-decorator';",
			"",
			"",
			"@Component({",
			"  name: '$3',",
			"  components: {},",
			"})",
			"export default class $4 extends Vue {",
			"  /* ------------------------ INPUT & OUTPUT ------------------------ */",
			"  // @Prop() private parentData!: any;",
			"  // @Emit('event_name') private handler() {}",
			"",
			"  /* ------------------------ VUEX (vuex getter & vuex action) ------------------------ */",
			"  // @Getter private some_getter!: any;",
			"  // @Action private some_action!: () => void;",
			"",
			"  /* ------------------------ LIFECYCLE HOOKS (created & mounted & ...) ------------------------ */",
			"  // private created() {}",
			"  // private mounted() {}",
			"",
			"  /* ------------------------ COMPONENT STATE (data & computed & model) ------------------------ */",
			"  // private my_data: string = 'some thing'; // data",
			"  // get computed_data(): string { return 'computed' } // computed",
			"",
			"  /* ------------------------ WATCH ------------------------ */",
			"  // @Watch('some_thing') private some_thing_changed(val: any, oldVal: any) {}",
			"",
			"  /* ------------------------ METHODS ------------------------ */",
			"  // private some_method(): void {}",
			"",
			"}",
			"",
			"</script>",
			"",
			"<template>",
			"<view class=\"${TM_FILENAME_BASE}$5-page\">",
			"",
			"</view>",
			"</template>",
			"",
			"<style lang=\"less\" scoped>",
			"",
			"</style>",
			""
		],
		"description": "typescript vue 基础模板"
	},
}